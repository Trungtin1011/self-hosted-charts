apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bytestash.fullname" . }}
  labels:
    {{- include "bytestash.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "bytestash.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "bytestash.labels" . | nindent 8 }}
	{{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "bytestash.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          {{- if eq .Values.ingress.path "/" }}
          - name: BASE_PATH
            value: ""
          {{- else }}
          - name: BASE_PATH
            value: {{ .Values.ingress.path | quote }}
          {{- end }}
          {{- with .Values.extraEnv }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- range $key, $value := .Values.extraEnvSecrets }}
          - name: {{ $key }}
            valueFrom:
              secretKeyRef:
                name: {{ $value.name | quote }}
                key: {{ $value.key | quote }}
          {{- end }}
          - name: DEBUG
            value: {{ .Values.bytestash.debug | quote }}
          - name: DISABLE_ACCOUNTS
            value: {{ .Values.bytestash.disableAccount | quote }}
          - name: DISABLE_INTERNAL_ACCOUNTS
            value: {{ .Values.bytestash.disableAllAccount | quote }}
          - name: ALLOW_NEW_ACCOUNTS
            value: {{ .Values.bytestash.allowNewAccount | quote }}
          {{- if ( ne .Values.bytestash.jwtSecret.secretName "" ) }}
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Values.bytestash.jwtSecret.secretName | quote }}
                key: {{ .Values.bytestash.jwtSecret.jwtKey | quote }}
          - name: TOKEN_EXPIRY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.bytestash.jwtSecret.secretName | quote }}
                key: {{ .Values.bytestash.jwtSecret.expirityKey | quote }}
          {{- end }}
          {{- if .Values.oidc_authentication.enabled }}
          - name: OIDC_ENABLED
            value: "true"
          - name: OIDC_DISPLAY_NAME
            value: {{ .Values.oidc_authentication.name | quote }}
          - name: OIDC_ISSUER_URL
            value: {{ .Values.oidc_authentication.issuerUrl | quote }}
          - name: OIDC_CLIENT_ID
            value: {{ .Values.oidc_authentication.clientId | quote }}
          - name: OIDC_CLIENT_SECRET
            value: {{ .Values.oidc_authentication.clientSecret | quote }}
          - name: OIDC_SCOPES
            value: {{ .Values.oidc_authentication.scopes | quote }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.ingress.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.ingress.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /data
              subPath: snippets
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "bytestash.fullname" . }}-data
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
